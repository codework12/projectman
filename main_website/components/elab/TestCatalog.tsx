"use client"
import React, { useState } from 'react';
import { LabTest } from '../models/LabTest';
import { labTests, getUniqueCategories, LAB_DISCLAIMER } from '../data/labTests';
import { useCart } from '../context/CartContext';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Search, Plus, Filter, CheckSquare, Eye, Star, Info, ChevronDown, ChevronUp, Package, Heart, Droplets, Activity, Shield } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { motion, HTMLMotionProps } from 'framer-motion';
import TestComparisonModal from './TestComparisonModal';
import TestReviews from './TestReviews';
import CartDropdown from './CartDropdown';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

const TestCatalog: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [compareMode, setCompareMode] = useState(false);
  const [selectedTests, setSelectedTests] = useState<LabTest[]>([]);
  const [isCompareModalOpen, setIsCompareModalOpen] = useState(false);
  const { addToCart } = useCart();
  const [currentPage, setCurrentPage] = useState(1);
  const testsPerPage = 6;
  const [isDisclaimerOpen, setIsDisclaimerOpen] = useState(false);
  const [isDisclaimerExpanded, setIsDisclaimerExpanded] = useState(false);
  
  const categories = ['all', ...getUniqueCategories()];
  
  const filteredTests = labTests.filter(test => {
    const matchesSearch = test.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
                          test.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          test.code.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = selectedCategory === 'all' || test.category === selectedCategory;
    
    return matchesSearch && matchesCategory;
  });

  const totalPages = Math.ceil(filteredTests.length / testsPerPage);
  const paginatedTests = filteredTests.slice((currentPage - 1) * testsPerPage, currentPage * testsPerPage);

  const toggleTestSelection = (test: LabTest) => {
    if (selectedTests.some(t => t.id === test.id)) {
      setSelectedTests(selectedTests.filter(t => t.id !== test.id));
    } else {
      if (selectedTests.length < 3) {
        setSelectedTests([...selectedTests, test]);
      }
    }
  };

  const handleCompare = () => {
    if (selectedTests.length > 1) {
      setIsCompareModalOpen(true);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8 text-gray-900 dark:bg-[#10151a] dark:text-gray-100 min-h-screen">
      {/* Disclaimer Section */}
      <Collapsible open={isDisclaimerExpanded} onOpenChange={setIsDisclaimerExpanded}>
        <CollapsibleTrigger asChild>
          <div
            className={`mb-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-[#1a2233] dark:to-[#232b3a] rounded-xl border border-blue-200 dark:border-blue-900 shadow-sm cursor-pointer transition-all duration-200 ${isDisclaimerExpanded ? 'ring-2 ring-blue-400 scale-[1.03]' : ''}`}
            onClick={() => setIsDisclaimerExpanded(!isDisclaimerExpanded)}
          >
            <div className="flex items-start gap-4">
              <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                <Info className="text-blue-600 dark:text-blue-300" size={24} />
              </div>
              <div className="flex-1">
                <h3 className="font-bold text-blue-900 dark:text-blue-200 mb-3 text-lg flex items-center">
                  Direct Consumer Lab
                  <span className="ml-2 text-xs font-normal text-blue-700 dark:text-blue-300">{isDisclaimerExpanded ? '(Hide Info)' : '(Show Info)'}</span>
                </h3>
                {!isDisclaimerExpanded && (
                  <p className="text-blue-800 dark:text-blue-300 leading-relaxed">
                    {LAB_DISCLAIMER}
                  </p>
                )}
                <CollapsibleContent>
                  <div className="pt-2 text-base text-blue-900 dark:text-blue-200">
                    <ul className="list-disc pl-6 space-y-2">
                      <li>OurTopClinic facilitates access to laboratory testing by partnering with accredited, independent labs. We do not perform the testing ourselves and cannot guarantee the accuracy or reliability of any results generated by third-party laboratories. While we work with nationally recognized labs, it is important to understand that no test is infallibleâ€”inaccurate results, including false positives and false negatives, may occur. Labcorp will handle all specimen collection services.</li>
                      <li>The lab results provided through OurTopClinic are for general informational use only and are not a replacement for professional medical care. You are strongly encouraged to consult with a licensed healthcare provider for an in-depth interpretation of your results and to discuss appropriate next steps regarding your health.</li>
                      <li>OurTopClinic does not offer medical diagnoses or treatment plans based solely on lab test outcomes unless such services are separately provided by a licensed clinician within our platform.</li>
                      <li>Direct-to-consumer lab testing through OurTopClinic is available exclusively to self-pay patients only. Insurance is not accepted for these services. Results may take up to 3 weeks.</li>
                      <li>By utilizing OurTopClinic's lab testing services, you acknowledge and accept that OurTopClinic is not liable for any decisions made, outcomes experienced, or harm sustained as a result of your reliance on the provided information or test results.</li>
                      <li>All health data and lab results shared through OurTopClinic are considered confidential and are intended only for the individual named in the report. If you are not the intended recipient, you are hereby notified that any access, distribution, or use of this information is strictly prohibited. Please contact OurTopClinic Support immediately if you believe you have received this information in error and securely dispose of the materials.</li>
                    </ul>
                  </div>
                </CollapsibleContent>
              </div>
            </div>
          </div>
        </CollapsibleTrigger>
      </Collapsible>

      <div className="flex flex-col md:flex-row justify-between items-center gap-4 mb-8">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
          <Input 
            type="search" 
            placeholder="Search for lab tests by name or code" 
            className="pl-10 py-6 text-lg rounded-lg shadow-sm border-gray-200 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-100"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <div className="relative min-w-[200px]">
          <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
          <select 
            className="w-full h-full pl-10 pr-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm appearance-none dark:bg-gray-900 dark:text-gray-100"
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
          >
            {categories.map(category => (
              <option key={category} value={category}>
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </option>
            ))}
          </select>
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant={compareMode ? "default" : "outline"}
            onClick={() => {
              setCompareMode(!compareMode);
              setSelectedTests([]);
            }}
            className={`${compareMode ? 'bg-blue-600 dark:bg-blue-700' : ''}`}
          >
            <CheckSquare size={16} className="mr-2" />
            Compare Tests
          </Button>
          <CartDropdown />
        </div>
      </div>

      {/* Comparison bar - shown when in compare mode */}
      {compareMode && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          style={{ marginBottom: '1.5rem', padding: '1rem', backgroundColor: '#EFF6FF', borderRadius: '0.5rem', boxShadow: '0 1px 2px 0 rgb(0 0 0 / 0.05)', border: '1px solid #DBEAFE' }}
        >
          <div className="flex flex-col sm:flex-row items-center justify-between">
            <div>
              <h3 className="font-medium text-blue-800">Compare Tests</h3>
              <p className="text-sm text-blue-600">Select up to 3 tests to compare</p>
            </div>
            <div className="flex items-center gap-3 mt-3 sm:mt-0">
              <span className="text-sm text-blue-800">{selectedTests.length}/3 selected</span>
              <Button 
                onClick={handleCompare}
                disabled={selectedTests.length < 2}
                size="sm"
              >
                <Eye size={16} className="mr-1" />
                Compare Selected
              </Button>
            </div>
          </div>
        </motion.div>
        
      )
      }

      {/* Mobile Tabs for Categories */}
      <div className="block md:hidden mb-6">
        <Tabs defaultValue="all">
          <TabsList className="flex overflow-x-auto w-full bg-white dark:bg-gray-900">
            {categories.map(category => (
              <TabsTrigger 
                key={category} 
                value={category}
                onClick={() => setSelectedCategory(category)}
                className="whitespace-nowrap"
              >
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>
      </div>
      
      {filteredTests.length === 0 ? (
        <div className="text-center py-12">
          <p className="text-xl text-gray-600">No tests found matching your search criteria.</p>
          <Button 
            variant="outline" 
            onClick={() => { setSearchTerm(''); setSelectedCategory('all'); }}
            className="mt-4"
          >
            Clear Filters
          </Button>
        </div>
        
      ) : (
        <>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 items-start">
          {paginatedTests.map((test) => (
            <TestCard 
              key={test.id} 
              test={test} 
              onAddToCart={() => addToCart(test)} 
              compareMode={compareMode}
              isSelected={selectedTests.some(t => t.id === test.id)}
              onToggleSelect={() => toggleTestSelection(test)}
            />
          ))}
        </div>
        {/* Pagination Controls */}
        {totalPages > 1 && (
          <div className="flex justify-center mt-8 gap-2">
            <button
              onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}
              disabled={currentPage === 1}
              className="px-3 py-1 rounded bg-gray-200 dark:bg-gray-800 text-gray-700 dark:text-gray-200 disabled:opacity-50"
            >
              Previous
            </button>
            {[...Array(totalPages)].map((_, i) => (
              <button
                key={i}
                onClick={() => setCurrentPage(i + 1)}
                className={`px-3 py-1 rounded ${currentPage === i + 1 ? 'bg-blue-600 dark:bg-blue-700 text-white' : 'bg-gray-200 dark:bg-gray-800 text-gray-700 dark:text-gray-200'}`}
              >
                {i + 1}
              </button>
            ))}
            <button
              onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))}
              disabled={currentPage === totalPages}
              className="px-3 py-1 rounded bg-gray-200 dark:bg-gray-800 text-gray-700 dark:text-gray-200 disabled:opacity-50"
            >
              Next
            </button>
          </div>
        )}
        </>
      )}

      {/* Comparison Modal */}
      <TestComparisonModal 
        open={isCompareModalOpen} 
        onOpenChange={setIsCompareModalOpen} 
        tests={selectedTests} 
      />
    </div>
  );
};

interface TestCardProps {
  test: LabTest;
  onAddToCart: () => void;
  compareMode: boolean;
  isSelected: boolean;
  onToggleSelect: () => void;
}

const TestCard: React.FC<TestCardProps> = ({ 
  test, 
  onAddToCart, 
  compareMode, 
  isSelected, 
  onToggleSelect 
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  
  // Generate a random rating between 4 and 5
  const rating = 4 + Math.random() * 1;
  
  // Check if it's a panel test and get included tests
  const isPanelTest = test.category.includes('Panel') || test.category.includes('Vitamins and Minerals');
  
  // Get category icon
  const getCategoryIcon = () => {
    const category = test.category.toLowerCase();
    if (category.includes('blood')) return <Droplets className="h-4 w-4" />;
    if (category.includes('heart') || category.includes('cardiac')) return <Heart className="h-4 w-4" />;
    if (category.includes('wellness') || category.includes('panel')) return <Package className="h-4 w-4" />;
    if (category.includes('std')) return <Shield className="h-4 w-4" />;
    return <Activity className="h-4 w-4" />;
  };

  // Get category color
  const getCategoryColor = () => {
    const category = test.category.toLowerCase();
    if (category.includes('blood')) return 'bg-red-100 text-red-700 border-red-200 dark:bg-red-900 dark:text-red-200 dark:border-red-800';
    if (category.includes('heart') || category.includes('cardiac')) return 'bg-pink-100 text-pink-700 border-pink-200 dark:bg-pink-900 dark:text-pink-200 dark:border-pink-800';
    if (category.includes('wellness') || category.includes('panel')) return 'bg-blue-100 text-blue-700 border-blue-200 dark:bg-blue-900 dark:text-blue-200 dark:border-blue-800';
    if (category.includes('std')) return 'bg-purple-100 text-purple-700 border-purple-200 dark:bg-purple-900 dark:text-purple-200 dark:border-purple-800';
    if (category.includes('diabetes')) return 'bg-orange-100 text-orange-700 border-orange-200 dark:bg-orange-900 dark:text-orange-200 dark:border-orange-800';
    if (category.includes('prostate')) return 'bg-green-100 text-green-700 border-green-200 dark:bg-green-900 dark:text-green-200 dark:border-green-800';
    if (category.includes('vitamins')) return 'bg-yellow-100 text-yellow-700 border-yellow-200 dark:bg-yellow-900 dark:text-yellow-200 dark:border-yellow-800';
    return 'bg-gray-100 text-gray-700 border-gray-200 dark:bg-gray-900 dark:text-gray-200 dark:border-gray-800';
  };
  
  // Define what's included in each panel
  const getIncludedTests = () => {
    if (test.name === 'Basic Wellness Panel') {
      return [
        { name: 'CBC w/Diff', description: 'Checks for infections, anemia, and overall blood health' },
        { name: 'Comprehensive Metabolic Panel', description: 'Full picture of organ function, blood sugar, and electrolytes' },
        { name: 'Lipid Panel', description: 'Measures cholesterol and fats to assess heart health' },
        { name: 'Cortisol', description: 'Measures your stress hormone level' },
        { name: 'Hemoglobin A1C', description: 'Shows average blood sugar over the past 3 months' },
        { name: 'Microalbumin/Cre Ratio', description: 'Detects early signs of kidney damage' },
        { name: 'Thyroid Panel (Free T3, Free T4, TSH)', description: 'Checks thyroid function' }
      ];
    } else if (test.name === 'Vitamins and Minerals Panel') {
      return [
        { name: 'Vitamin B12 & Folate', description: 'Essential for energy and nerve function' },
        { name: 'Vitamin D, 25-OH, Total', description: 'Important for bone health and immunity' },
        { name: 'Zinc', description: 'Essential mineral for immune function and healing' },
        { name: 'Phosphorus, Serum', description: 'Important for bone and teeth health' },
        { name: 'Magnesium', description: 'Essential for muscle and nerve function' }
      ];
    }
    return [];
  };
  
  const includedTests = getIncludedTests();
  
  return (
    <Card className={`rounded-xl overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 ${isSelected ? 'ring-2 ring-blue-500 dark:ring-blue-400 bg-blue-50 dark:bg-blue-900' : ''} ${isPanelTest ? 'border-2 border-orange-200 dark:border-orange-800 bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-[#232014] dark:to-[#2d261a]' : 'bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700'}`}>
      <CardHeader className={`${isPanelTest ? 'rounded-t-xl bg-gradient-to-r from-orange-100 to-yellow-100 dark:from-[#232014] dark:to-[#2d261a]' : getCategoryColor().replace('text-', 'bg-').replace('-700', '-50') + ' rounded-t-xl'} pb-4 relative overflow-hidden`}>
        {isPanelTest && (
          <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-orange-300 to-yellow-300 rounded-bl-full opacity-20"></div>
        )}
        <div className="flex justify-between items-start relative z-10">
          <CardTitle className="text-lg flex items-center gap-2 font-bold">
            {getCategoryIcon()}
            {test.name}
            {isPanelTest && (
              <Badge className="bg-gradient-to-r from-orange-500 to-yellow-500 text-white text-xs px-2 py-1 ml-2 dark:from-orange-700 dark:to-yellow-600 dark:text-yellow-100">
                <Package className="h-3 w-3 mr-1" />
                PANEL
              </Badge>
            )}
          </CardTitle>
          <Badge variant="outline" className={`${getCategoryColor()} text-xs font-mono`}>
            {test.code}
          </Badge>
        </div>
        <div className="flex items-center gap-2 mt-2">
          <Badge className={getCategoryColor()}>
            {getCategoryIcon()}
            <span className="ml-1">{test.category}</span>
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="pt-4 pb-6 dark:bg-gray-900">
        <p className="text-sm text-gray-600 mb-4 leading-relaxed">{test.description}</p>
        
        {/* Panel expansion for included tests */}
        {isPanelTest && includedTests.length > 0 && (
          <Collapsible open={isExpanded} onOpenChange={setIsExpanded}>
            <CollapsibleTrigger asChild>
              <Button 
                variant="ghost" 
                size="sm" 
                className="w-full justify-between mb-4 bg-gradient-to-r from-orange-50 to-yellow-50 hover:from-orange-100 hover:to-yellow-100 border-2 border-orange-200 text-orange-700 font-medium"
              >
                <span className="flex items-center">
                  <Package className="h-4 w-4 mr-2" />
                  What's included ({includedTests.length} tests)
                </span>
                {isExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
              </Button>
            </CollapsibleTrigger>
            <CollapsibleContent className="space-y-1 mb-4">
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                style={{ background: 'linear-gradient(to right, #FFF7ED, #FEF3C7)', padding: '1rem', borderRadius: '0.75rem', border: '2px solid #FDBA74' }}
              >
                <div className="space-y-3">
                  {includedTests.map((testItem, index) => (
                    <div key={index} className="flex items-start gap-3 p-2 bg-white rounded-lg border border-orange-100">
                      <div className="w-2 h-2 bg-orange-400 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <span className="font-medium text-gray-800 text-sm">{testItem.name}</span>
                        <p className="text-xs text-gray-600 mt-1">{testItem.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="mt-4 pt-3 border-t border-orange-200">
                  <div className="flex items-center justify-between bg-gradient-to-r from-orange-100 to-yellow-100 p-3 rounded-lg">
                    <span className="text-sm font-medium text-orange-800">ðŸ’° Bundle Savings</span>
                    <span className="text-xs text-orange-700">Individual tests would cost more</span>
                  </div>
                </div>
              </motion.div>
            </CollapsibleContent>
          </Collapsible>
        )}

        {/* Individual test info for non-panel tests */}
        {!isPanelTest && (
          <div className="mb-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
            <div className="flex items-center gap-2 mb-2">
              {getCategoryIcon()}
              <span className="text-sm font-medium text-gray-700 dark:text-gray-200">Test Information</span>
            </div>
            <p className="text-xs text-gray-600 dark:text-gray-300">
              This is a single laboratory test that provides specific health insights related to {test.category.toLowerCase()}.
            </p>
          </div>
        )}
        
        {/* Rating display */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <div className="flex mr-2">
              {[...Array(5)].map((_, i) => (
                <Star
                  key={i}
                  size={14}
                  className={`${
                    i < Math.floor(rating)
                      ? "text-yellow-400 fill-yellow-400"
                      : i < rating
                      ? "text-yellow-400 fill-yellow-400 opacity-50"
                      : "text-gray-300"
                  }`}
                />
              ))}
            </div>
            <span className="text-sm text-gray-500">({rating.toFixed(1)})</span>
          </div>
          <TestReviews testId={test.id} testName={test.name} />
        </div>
        
        <div className="flex justify-between items-center">
          <div className="flex flex-col">
            <span className="font-bold text-xl text-green-600">${test.price.toFixed(2)}</span>
          </div>
          {compareMode ? (
            <Button 
              variant={isSelected ? "default" : "outline"} 
              size="sm" 
              onClick={onToggleSelect}
              className={isSelected ? "bg-blue-600 hover:bg-blue-700" : ""}
            >
              {isSelected ? "Selected" : "Select"}
            </Button>
          ) : (
            <Button 
              size="sm" 
              className={`${isPanelTest ? 'bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white shadow-lg' : 'bg-blue-600 hover:bg-blue-700 text-white'} transition-all duration-200`}
              onClick={onAddToCart}
            >
              <Plus size={16} className="mr-1" />
              Add to Cart
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default TestCatalog;





        
   