generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                         String           @id
  first_name                 String
  last_name                  String
  date_of_birth              DateTime
  gender                     Gender           @default(MALE)
  phone                      String
  email                      String           @unique
  height                     Float
  weight                     Float
  address                    String
  emergency_contact_name     String
  emergency_contact_number   String
  relation                   String
  marital_status             String
  blood_group                String?
  allergies                  String?
  medical_conditions         String?
  medical_history            String?
  insurance_provider         String?
  insurance_number           String?
  privacy_consent            Boolean
  service_consent            Boolean
  medical_consent            Boolean
  img                        String?
  colorCode                  String?
  city                       String
  state                      String
  zip_code                   String
  created_at                 DateTime         @default(now())
  updated_at                 DateTime         @updatedAt
  preferred_appointment_type String
  preferred_contact_method   String
  appointments               Appointment[]
  medical                    MedicalRecords[]
  payments                   Payment[]
  ratings                    Rating[]
  patientIntakes             PatientIntake[]
  orders                     Order[]
  reviews                    Review[]
}

model Doctor {
  id                  String          @id
  email               String          @unique
  name                String
  specialization      String
  license_number      String          @unique
  phone               String
  address             String
  department          String?
  img                 String?
  colorCode           String?
  availability_status String?
  type                JOBTYPE         @default(FULL)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  appointments        Appointment[]
  diagnosis           Diagnosis[]
  ratings             Rating[]
  working_days        WorkingDays[]
  city                String
  state               String
  zip                 String
  npi_number          String
  years_in_practice   String?
  patientIntakes      PatientIntake[]
  services            Services[]
}

model WorkingDays {
  id         Int      @id @default(autoincrement())
  doctor_id  String
  day        String
  start_time String
  close_time String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  doctor     Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
}

model Appointment {
  id               Int               @id @default(autoincrement())
  patient_id       String
  doctor_id        String
  appointment_date DateTime
  time             String
  status           AppointmentStatus @default(PENDING)
  type             String
  note             String?
  reason           String?
  mode             String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  doctor           Doctor            @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  patient          Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  medical          MedicalRecords[]
  bills            Payment?
  patientIntake    PatientIntake?
}

model Payment {
  id             Int            @id @default(autoincrement())
  bill_id        Int?
  patient_id     String
  appointment_id Int            @unique
  bill_date      DateTime
  payment_date   DateTime
  discount       Float
  total_amount   Float
  amount_paid    Float
  payment_method PaymentMethod  @default(CASH)
  status         PaymentStatus  @default(UNPAID)
  receipt_number Int            @default(autoincrement())
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  bills          PatientBills[]
  appointment    Appointment    @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        Patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
}

model PatientBills {
  id           Int      @id @default(autoincrement())
  bill_id      Int
  service_id   Int
  service_date DateTime
  quantity     Int
  unit_cost    Float
  total_cost   Float
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  payment      Payment  @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  service      Services @relation(fields: [service_id], references: [id])
}

model MedicalRecords {
  id             Int          @id @default(autoincrement())
  patient_id     String
  appointment_id Int
  doctor_id      String
  treatment_plan String?
  prescriptions  String?
  lab_request    String?
  notes          String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  diagnosis      Diagnosis[]
  lab_test       LabTest[]
  appointment    Appointment  @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        Patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  vital_signs    VitalSigns[]
}

model VitalSigns {
  id                Int            @id @default(autoincrement())
  patient_id        String
  medical_id        Int
  body_temperature  Float
  systolic          Int
  diastolic         Int
  heartRate         String
  respiratory_rate  Int?
  oxygen_saturation Int?
  weight            Float
  height            Float
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  medical           MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
}

model Diagnosis {
  id                     Int            @id @default(autoincrement())
  patient_id             String
  medical_id             Int
  doctor_id              String
  symptoms               String
  diagnosis              String
  notes                  String?
  prescribed_medications String?
  follow_up_plan         String?
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  doctor                 Doctor         @relation(fields: [doctor_id], references: [id])
  medical                MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  user_id    String
  record_id  String
  action     String
  details    String?
  model      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Rating {
  id         Int      @id @default(autoincrement())
  staff_id   String
  patient_id String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor     Doctor   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
}

model Services {
  id             Int                   @id @default(autoincrement())
  service_name   String
  description    String
  price          Float
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt
  bills          PatientBills[]
  availability   ServiceAvailability[]
  insurance      InsuranceAccepted[]
  status         String                @default("active")
  mode           String                @default("virtual")
  category       String                @default("General")
  hospitalName   String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  providerName   String
  doctor_id      String
  doctor         Doctor                @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  patientIntakes PatientIntake[]
}

model LabTest {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  price       Float
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  orderItems  OrderItem[]
  testResults TestResult[]
  medical     MedicalRecords[]
  reviews     Review[]
}

model Order {
  id                Int           @id @default(autoincrement())
  orderNumber       String        @unique
  status            OrderStatus
  totalAmount       Float
  paymentStatus     PaymentStatus
  paymentMethod     PaymentMethod
  paymentDate       DateTime
  transactionId     String?
  patientId         String
  orderDate         DateTime      @default(now())
  patientFirstName  String
  patientLastName   String
  patientEmail      String
  patientPhone      String
  patientDob        DateTime
  patientGender     String
  patientAddress    String
  patientCity       String
  patientState      String
  patientZipCode    String
  orderItems        OrderItem[]
  results           TestResult[]
  patient           Patient       @relation(fields: [patientId], references: [id])
}

model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int
  testId          Int
  quantity        Int
  price           Float
  testName        String
  testCode        String?
  testDescription String?
  testPrice       Float
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  test            LabTest  @relation(fields: [testId], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model TestResult {
  id             Int        @id @default(autoincrement())
  orderId        Int
  testId         Int
  resultValue    String?
  normalRange    String?
  unit           String?
  status         TestStatus @default(SCHEDULED)
  reviewed       Boolean    @default(false)
  fileAttachment Json?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  order          Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  test           LabTest    @relation(fields: [testId], references: [id])
}

model ServiceAvailability {
  id         Int      @id @default(autoincrement())
  service    Services @relation(fields: [service_id], references: [id], onDelete: Cascade)
  service_id Int
  day        String
  from       String
  to         String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model InsuranceAccepted {
  id         Int      @id @default(autoincrement())
  service    Services @relation(fields: [service_id], references: [id], onDelete: Cascade)
  service_id Int
  provider   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PatientIntake {
  id                    Int      @id @default(autoincrement())
  appointment_id        Int      @unique
  patient_id            String
  doctor_id             String
  service_id            Int
  chiefComplaint        String
  allergies             String?
  currentMedications    String?
  pastMedicalConditions String?
  bloodPressure         String?
  temperature           String?
  pharmacyName          String?
  pharmacyAddress       String?
  pharmacyPhone         String?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  appointment Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient     Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor      Doctor      @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  service     Services    @relation(fields: [service_id], references: [id], onDelete: Cascade)
}

model Review {
  id         Int      @id @default(autoincrement())
  patientId  String
  testId     Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  patient    Patient  @relation(fields: [patientId], references: [id])
  test       LabTest  @relation(fields: [testId], references: [id])
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

enum OrderStatus {
  SCHEDULED
  COMPLETED
}

enum TestStatus {
  SCHEDULED
  COMPLETED
}
